name: Automated Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  actions: read
  pull-requests: write

jobs:
  test:
    name: Run Browser Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      
      - name: Restore Playwright browsers cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
      
      - name: Install Node dependencies
        run: npm install
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      
      - name: Determine BASE_URL
        run: |
          # Construct GitHub Pages URL
          REPO_NAME="${{ github.event.repository.name }}"
          PAGES_URL="https://${{ github.repository_owner }}.github.io/${REPO_NAME}"
          
          echo "Checking if GitHub Pages is available at: ${PAGES_URL}"
          
          # Check if GitHub Pages root is accessible and then verify test-runner.html exists
          ROOT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${PAGES_URL}/")
          if [ "$ROOT_STATUS" = "200" ]; then
            # Root is accessible, now check if test-runner.html exists
            TEST_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${PAGES_URL}/tests/test-runner.html")
            if [ "$TEST_STATUS" = "200" ]; then
              echo "GitHub Pages is available with test-runner.html, using it for tests"
              echo "BASE_URL=${PAGES_URL}" >> $GITHUB_ENV
              echo "USE_PAGES=true" >> $GITHUB_ENV
            else
              echo "GitHub Pages root accessible but test-runner.html not found (status: ${TEST_STATUS})"
              echo "BASE_URL=http://localhost:8080" >> $GITHUB_ENV
              echo "USE_PAGES=false" >> $GITHUB_ENV
            fi
          else
            echo "GitHub Pages not available (status: ${ROOT_STATUS}), will use local server"
            echo "BASE_URL=http://localhost:8080" >> $GITHUB_ENV
            echo "USE_PAGES=false" >> $GITHUB_ENV
          fi
      
      - name: Setup Python (if local server needed)
        if: env.USE_PAGES == 'false'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Start local HTTP server (if needed)
        if: env.USE_PAGES == 'false'
        run: |
          cd ${{ github.workspace }}
          python3 -m http.server 8080 &
          sleep 2
          echo "Server started on port 8080"
      
      - name: Run Playwright tests
        run: npx playwright test
      
      - name: Upload test results screenshot
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 30
      
      - name: Test Summary
        if: always()
        run: |
          echo "## Test Results ðŸ§ª" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "BASE_URL used: ${{ env.BASE_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "test-results.json" ]; then
            echo "Test execution completed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "Test results not found." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View the detailed test results in the artifacts." >> $GITHUB_STEP_SUMMARY
