name: Automated Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  actions: read
  pull-requests: write

jobs:
  test:
    name: Run Browser Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Start HTTP server
        run: |
          cd ${{ github.workspace }}
          python3 -m http.server 8080 &> server.log &
          # wait up to 30s for test-runner page
          for i in {1..30}; do
            if curl -sS http://localhost:8080/tests/test-runner.html -f >/dev/null 2>&1; then
              echo "Server up"
              break
            fi
            sleep 1
          done
          curl -sS http://localhost:8080/tests/test-runner.html -f >/dev/null 2>&1 || (echo "Server did not start" && tail -n +1 server.log && exit 1)

      - name: Setup Node.js for Playwright
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright and browser deps
        run: |
          npm init -y
          npm install -D @playwright/test
          npx playwright install --with-deps

      - name: Create Playwright test
        run: |
          cat > playwright.config.js <<'EOF'
          module.exports = {
            testDir: './playwright-tests',
            timeout: 60000,
            retries: process.env.CI ? 1 : 0,
            use: {
              baseURL: 'http://localhost:8080',
              headless: true,
              trace: 'on-first-retry',
              screenshot: 'only-on-failure',
              video: 'retain-on-failure'
            },
          };
          EOF
          
          mkdir -p playwright-tests
          # keep existing test file in repo; create only if not present
          if [ ! -f playwright-tests/test-runner.spec.js ]; then
            cat > playwright-tests/test-runner.spec.js <<'EOF'
              const { test, expect } = require('@playwright/test');
              // minimal placeholder; repo already has a richer test
              test('OrarioDoc automated tests', async ({ page }) => {
                await page.goto('/tests/test-runner.html');
                await page.waitForLoadState('domcontentloaded');
                await page.waitForSelector('#run-tests');
                await page.click('#run-tests');
                await page.waitForSelector('.status.success, .status.failed', { timeout: 120000 });
                const stats = await page.evaluate(() => ({
                total: parseInt(document.getElementById('stat-total')?.textContent || '0', 10),
                passed: parseInt(document.getElementById('stat-passed')?.textContent || '0', 10),
                failed: parseInt(document.getElementById('stat-failed')?.textContent || '0', 10),
                skipped: parseInt(document.getElementById('stat-skipped')?.textContent || '0', 10)
              }));
              expect(stats.failed).toBe(0);
          });
          EOF
          fi

      - name: Run Playwright tests
        run: |
          # Run committed tests; produce JSON report too for artifacts
          npx playwright test --reporter=json > test-results.json

      - name: Upload test results artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results.json
            playwright-report/
          retention-days: 30

      - name: Test Summary
        if: always()
        run: |
          echo "## Test Results ðŸ§ª" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Test runner executed. View the test results artifacts." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Artifacts: test-results.json e playwright-report/ (include screenshot e trace su failure)" >> $GITHUB_STEP_SUMMARY

